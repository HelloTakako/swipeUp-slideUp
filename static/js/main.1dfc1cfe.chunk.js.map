{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["handleHeight","Wrapper","styled","div","SwipedContents","Handle","SwipedText","App","useState","testText","setTestText","touchStartPosition","setTouchStartPosition","swipedContentsRef","useRef","ref","onTouchStart","e","changedTouches","clientY","onTouchMove","window","innerHeight","current","style","top","onTouchEnd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAwEA,IAAMA,EAAe,OAEfC,EAAUC,IAAOC,IAAV,+GAOPC,EAAiBF,IAAOC,IAAV,0NAIEH,GAGhBK,EAASH,IAAOC,IAAV,+YAEAH,GAmBNM,EAAaJ,IAAOC,IAAV,wIAISH,GAIVO,EAjHf,WAAgB,IAAD,EACmBC,mBAAS,eAD5B,mBACNC,EADM,KACIC,EADJ,OAEuCF,qBAFvC,mBAENG,EAFM,KAEcC,EAFd,KAIPC,EAAoBC,mBAoC1B,OACE,eAACb,EAAD,WACE,4BAAIQ,IACJ,eAACL,EAAD,CAAgBW,IAAKF,EAArB,UACE,cAACR,EAAD,CACEW,aAAc,SAACC,GAAD,OACZL,EAAsBK,EAAEC,eAAe,GAAGC,UAE5CC,YA1CgB,SAACH,GAEnBN,EAAqBU,OAAOC,YAAc,GAC5CT,EAAkBU,QAAQC,MAAMC,IAAhC,UAAyCR,EAAEC,eAAe,GAAGC,QAA7D,MACIF,EAAEC,eAAe,GAAGC,QAAUE,OAAOC,YAAc,IACrDT,EAAkBU,QAAQC,MAAMC,IAAM,IAE/Bd,EAAqBU,OAAOC,YAAc,IAEnDT,EAAkBU,QAAQC,MAAMC,IAAhC,UAAyCR,EAAEC,eAAe,GAAGC,QAA7D,MACIF,EAAEC,eAAe,GAAGC,QAAUE,OAAOC,YAAc,IAErDT,EAAkBU,QAAQC,MAAMC,IAAhC,uBAAsDzB,EAAtD,OAIJU,EAAY,WA2BNgB,WAxBe,SAACT,GAClBA,EAAEC,eAAe,GAAGC,QAAUE,OAAOC,YAAc,IACrDT,EAAkBU,QAAQC,MAAMC,IAAhC,uBAAsDzB,EAAtD,KACIiB,EAAEC,eAAe,GAAGC,QAAUE,OAAOC,YAAc,IACrDT,EAAkBU,QAAQC,MAAMC,IAAM,IAG1Cf,EAAY,YAmBR,cAACJ,EAAD,6qBC3COqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1dfc1cfe.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport styled from \"@emotion/styled\";\n\nfunction App() {\n  const [testText, setTestText] = useState(\"not touched\");\n  const [touchStartPosition, setTouchStartPosition] = useState();\n\n  const swipedContentsRef = useRef();\n\n  const handleTouchMove = (e) => {\n    // if the touch position is below the half of the screen\n    if (touchStartPosition > window.innerHeight / 2) {\n      swipedContentsRef.current.style.top = `${e.changedTouches[0].clientY}px`;\n      if (e.changedTouches[0].clientY < window.innerHeight / 2) {\n        swipedContentsRef.current.style.top = 0;\n      }\n    } else if (touchStartPosition < window.innerHeight / 2) {\n      // if the touch position is above the half of the screen\n      swipedContentsRef.current.style.top = `${e.changedTouches[0].clientY}px`;\n      if (e.changedTouches[0].clientY < window.innerHeight / 2) {\n        // the contents cover the screen\n        swipedContentsRef.current.style.top = `calc(100vh - ${handleHeight})`;\n      }\n    }\n\n    setTestText(\"moving\");\n  };\n\n  const handleTouchEnd = (e) => {\n    if (e.changedTouches[0].clientY > window.innerHeight / 2) {\n      swipedContentsRef.current.style.top = `calc(100vh - ${handleHeight})`;\n      if (e.changedTouches[0].clientY < window.innerHeight / 2) {\n        swipedContentsRef.current.style.top = 0;\n      }\n    }\n    setTestText(\"ended\");\n  };\n\n  // TODO:\n  // - check the difference of event objects' pageY, clientY, screenY\n  // - search the default bottom navbar & URL bar of iOS\n  // (it causes the difference between view on chrome devtools' responsive view & iOS simulator)\n\n  return (\n    <Wrapper>\n      <p>{testText}</p>\n      <SwipedContents ref={swipedContentsRef}>\n        <Handle\n          onTouchStart={(e) =>\n            setTouchStartPosition(e.changedTouches[0].clientY)\n          }\n          onTouchMove={handleTouchMove}\n          onTouchEnd={handleTouchEnd}\n        />\n        <SwipedText>\n          Here are some examples of what you can achieve with the Extension API:\n          Change the look of VS Code with a color or file icon theme - Theming\n          Add custom components &amp; views in the UI - Extending the Workbench\n          Create a Webview to display a custom webpage built with HTML/CSS/JS -\n          Webview Guide Support a new programming language - Language Extensions\n          Overview Support debugging a specific runtime - Debugger Extension\n          Guide If you'd like to have a more comprehensive overview of the\n          Extension API, refer to the Extension Capabilities Overview page.\n          Extension Guides Overview also includes a list of code samples and\n          guides that illustrate various Extension API usage.\n        </SwipedText>\n      </SwipedContents>\n    </Wrapper>\n  );\n}\n\nconst handleHeight = \"15vh\";\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  background-color: #ddd;\n`;\n\nconst SwipedContents = styled.div`\n  position: fixed;\n  cubic-bezier(0.680, -0.550, 0.265, 1.550); \n  transition: all 250ms cubic-bezier(0.860, 0.000, 0.070, 1.000);\n  top: calc(100vh - ${handleHeight}); // only <Handle /> is visible\n`;\n\nconst Handle = styled.div`\n  background-color: #444;\n  height: ${handleHeight};\n  border-radius: 20px 20px 0 0;\n  position: relative;\n\n  // the line in the middle\n  &:after {\n    content: \"\";\n    display: block;\n    height: 5px;\n    width: 60px;\n    background-color: #fff;\n    border-radius: 5px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n`;\n\nconst SwipedText = styled.div`\n  background-color: #444;\n  color: #fff;\n  padding: 5vw;\n  height: calc(100vh - ${handleHeight});\n  overflow: auto;\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}